###########################################################################################
# N-body simulation
#
# Based on Mark C. Lewis's (with modifications from Chad Whipkey) "n-body Java #2 program"
#   <https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-java-2.html>
#
# Uses:
#
###########################################################################################

# Type aliases:
typename Triple(a) = (a, a, a);
typename AList(a, b) = [(a, b)];

typename Vector3 = Triple(Float);
typename Acceleration = Vector3;
var zero3 = (0.0, 0.0, 0.0) : Vector3;
typename Scalar = Float;

typename Body = ( pos  : Vector3
                , vel  : Vector3
                , mass : Scalar );

typename Name = [| Sun
                 | Mercury
                 | Venus
                 | Earth
                 | Mars
                 | Jupiter
                 | Saturn
                 | Uranus
                 | Neptune |];

typename State = AList(Name, Body);

# Helper functions:
sig fst3 : (Triple(a)) -> a
fun fst3((x,_,_)) { x }

sig snd3 : (Triple(a)) -> a
fun snd3((_,y,_)) { y }

sig thd3 : (Triple(a)) -> a
fun thd3((_,_,z)) { z }

sig assoc : (AList(a, b), a) ~> Maybe(b)
fun assoc(alst, k) {
  switch (alst) {
    case []              -> Nothing
    case ((xk,xv)::rest) -> if (xk == k)
                            { Just(xv) }
                          else
                            { assoc(rest, k) }
  }
}

sig upd_assoc : (AList(a,b), a, b) ~> AList(a,b)
fun upd_assoc(alst, k, v) {
  switch (alst) {
    case []              -> [(k, v)]
    case ((xk,xv)::rest) -> if (xk == k)
                           { (k,v) :: rest }
                         else
                           { (xk,xv) :: upd_assoc(rest, k, v) }
  }
}

fun interact(n, )
