############################################################################################
# N-body simulation using Effects and Handlers                                             #
# ============================================                                             #
#                                                                                          #
# Based on:                                                                                #
# * the simple implementation in <nbody-simple.links>                                      #
# * Mark C. Lewis's (with modifications from Chad Whipkey) "n-body Java #2 program"        #
#  <https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-java-2.html> #
# * and Troestler Christophe's implementation of the same problem in OCaml                 #
#  <https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-ocaml-1.html>#
#                                                                                          #
# Uses: TODO fill this                                                                     #
#                                                                                          #
############################################################################################

# Type aliases:
typename Triple(a) = (a, a, a);
typename Alist(a, b) = [(a, b)];

typename Vector3 = Triple(Float);
var zero3 = (0.0, 0.0, 0.0) : Vector3;
typename Scalar = Float;

typename Name = [| Sun
                 | Jupiter
                 | Saturn
                 | Uranus
                 | Neptune |];

typename Body = ( pos  : Vector3
                , vel  : Vector3
                , mass : Scalar );

typename State = Alist(Name, Body);


# Helper functions:

sig fst : ((a,b)) -> a
fun fst((a,_)) { a }

sig snd : ((a,b)) -> b
fun snd((_,b)) { b }

## Vectors:
op (ux,uy,uz) +++ (vx,vy,vz) { (ux +. vx, uy +. vy, uz +. vz ) }
op (ux,uy,uz) --- (vx,vy,vz) { (ux -. vx, uy -. vy, uz -. vz ) }

sig vector_sum : ([Vector3]) ~> Vector3
fun vector_sum(lst) {
  fold_left((+++), zero3, lst)
}

infix 5 **.;
op s **. (x,y,z) { (s *. x, s *. y, s *. z) }

sig norm2 : (Vector3) -> Float
fun norm2((x,y,z)) {
  x *. x +. y *. y +. z *. z
}

sig norm : (Vector3) -> Float
fun norm(v) {
  sqrt(norm2(v))
}

## Alist:
sig assoc : (a, Alist(a,b)) ~> Maybe(b)
fun assoc(k, alst) {
  switch (alst) {
    case [] -> Nothing
    case ((xk, xv)::rest) -> if (k == xk)
                               { Just(xv) }
                             else
                               { assoc(k, rest) }
  }
}

sig upd_assoc : (a, b, Alist(a,b)) ~> Alist(a,b)
fun upd_assoc(k, v, alst) {
  switch (alst) {
    case [] -> [(k,v)]
    case ((xk, xv)::rest) -> if (k == xk)
                               { (k, v) :: rest }
                             else
                               { (xk, xv) :: upd_assoc(k, v, rest) }
  }
}

# Handler stuff:

sig env : (Alist (a,b), () {Ask:(a) {}-> Maybe (b)|e}~> v) {Ask{_}|e}~> v
fun env(state, f) {
  handle (f()) {
    case Return(v) -> v
    case Ask(k, resume) -> resume(assoc(k, state))
  }
}

sig statemgr : (Alist (a,b), () {Ask:(a) {}-> Maybe (b),
                                 Put:(a, b) {}-> ()|e}~> v)
               {Ask{_},Put{_}|e}~> v
fun statemgr(state, f) {
  env(state, fun() {
    handle(f()) {
      case Return(x) -> x
      case Put(k, v, resume) -> {
        var state' = upd_assoc(k, v, state);
        env(state', fun() { resume(()) })
      }
    }
  })
}

sig ask : (a) {Ask:(a) {}-> b|e}~> b
fun ask(k) { do Ask(k) }

sig put : (a, b) {Put:(a, b) {}-> ()|e}~> ()
fun put(k, v) { do Put(k, v) }

# DSL for later

typename Property = [| Mass
                     | Pos
                     | Vel |];

typename Projection = [| Proj:(Name, Property) |];

typename Result = [| S':Scalar | V':Vector3 |];


infix 7 @.;
sig @. : (Name, Property) -> Projection
op e @. p { Proj(e, p) }


prefix 6 @!;
sig @! : (Projection) {Ask:(Name) {}-> Maybe(Body)|e}~> Result
op @! e {
  var Proj(n, p) = e;
  var b = ask(n);
  switch (b) {
    case Nothing -> error("Undefined symbol")
    case Just(b) -> {
      switch(p) {
        case Mass -> S'(b.mass)
	case Pos  -> V'(b.pos)
	case Vel  -> V'(b.vel)
      }
    }
  }
}


prefix 6 @!.;
sig @!. : (Projection) {Ask:(Name) {}-> Maybe(Body)|e}~> Scalar
op @!. e {
  switch(@!e) {
    case S'(v) -> v
    case _ -> error("Invalid scalar projection.")
  }
}


prefix 6 @!>;
sig @!> : (Projection) {Ask:(Name) {}-> Maybe(Body)|e}~> Vector3
op @!> e {
  switch(@!e) {
    case V'(v) -> v
    case _ -> error("Invalid vector projection.")
  }
}

infix 6 @=;
sig @= : (Projection, Result) {Ask:(Name) {}-> Maybe(Body),
                               Put:(Name, Body) {}-> ()|e}~> ()
op e @= v {
  var Proj(n, p) = e;
  var b = switch (ask(n)) {
    case Nothing -> error("Undefined symbol")
    case Just(b) -> b
  };
  var b' = switch ((p, v)) {
    case (Mass, S'(m)) -> (b with mass = m)
    case (Pos, V'(v)) -> (b with pos = v)
    case (Vel, V'(v)) -> (b with vel = v)
  };
  put(n, b');
  ()
}

# TODO for (maybe) SUGAR: having both ask and put in the same function requires them to
# share effect variable (or rather to be open => hence open by default)

infix 6 @=<;
sig @=< : (Projection, Vector3) {Ask:(Name) {}-> Maybe(Body),
                                 Put:(Name, Body) {}-> ()|e}~> ()
op e @=< v {
  e @= V'(v)
}


infix 6 @=<+;
sig @=<+ : (Projection, Vector3) {Ask:(Name) {}-> Maybe(Body),
                                 Put:(Name, Body) {}-> ()|e}~> ()
op e @=<+ v {
  var original = switch(@!e) {
    case V'(v) -> v
    case _ -> error("Cannot assign a scalar here.")
  };
  e @=< (original +++ v)
}

infix 6 @=<-;
sig @=<- : (Projection, Vector3) {Ask:(Name) {}-> Maybe(Body),
                                 Put:(Name, Body) {}-> ()|e}~> ()
op e @=<- v {
  var original = switch(@!e) {
    case V'(v) -> v
    case _ -> error("Cannot assign a scalar here.")
  };
  e @=< (original --- v)
}


# Physics

# Initialization of the solar system
sig offset_sun_momentum : (Scalar) {Ask:(Name) {}-> Maybe(Body),
                                    Put:(Name, Body) {}-> ()|_}~> ()
fun offset_sun_momentum(solar_mass) {
  var bodies = [ Sun, Jupiter, Saturn, Uranus, Neptune ];
  var dp = fold_left(fun(acc, n) {
    acc +++ (@!. n @. Mass **. @!> n @. Vel)
  }, zero3, bodies);
  var v = (-. 1.0 /. solar_mass) **. dp;
  Sun @. Vel @=< v
}

sig init_system : () {Ask:(Name) {}-> Maybe(Body),
                      Put:(Name, Body) {}-> ()|_}~> ()
fun init_system() {
  var pi = 3.141592653589793;
  var solar_mass = 4.0 *. pi *. pi;
  var days_per_year = 365.24;

  put(Sun, (mass = solar_mass, pos = zero3, vel = zero3));

  put(Jupiter, ( mass = 9.54791938424326609e-4 *. solar_mass
               , pos  = ( 4.84143144246472090e0
                        , -.1.16032004402742839e0
                        , -.1.03622044471123109e-1 )
               , vel  = ( 1.66007664274403694e-3 *. days_per_year
                        , 7.69901118419740425e-3 *. days_per_year
                        , -.6.90460016972063023e-5 *. days_per_year )));

  put(Saturn, ( mass = 2.85885980666130812e-4 *. solar_mass
              , pos  = ( 8.34336671824457987e0
                       , 4.12479856412430479e0
                       , -.4.03523417114321381e-1 )
              , vel  = ( -.2.76742510726862411e-3 *. days_per_year
                       , 4.99852801234917238e-3 *. days_per_year
                       , 2.30417297573763929e-5 *. days_per_year )));

  put(Uranus, ( mass = 4.36624404335156298e-5 *. solar_mass
              , pos  = ( 1.28943695621391310e1
                       , -.1.51111514016986312e1
                       , -.2.23307578892655734e-1 )
              , vel  = ( 2.96460137564761618e-3 *. days_per_year
                       , 2.37847173959480950e-3 *. days_per_year
                       , -.2.96589568540237556e-5 *. days_per_year )));

  put(Neptune, ( mass = 5.15138902046611451e-5 *. solar_mass
               , pos  = ( 1.53796971148509165e1
                        , -.2.59193146099879641e1
                        , 1.79258772950371181e-1 )
               , vel  = ( 2.68067772490389322e-3 *. days_per_year
                        , 1.62824170038242295e-3 *. days_per_year
                        , -.9.51592254519715870e-5 *. days_per_year )));

  offset_sun_momentum(solar_mass)
}

sig physical_state_mgr : (() ~%~> v) ~%~> v
fun physical_state_mgr(f) {
  statemgr([], fun () {
    init_system();
    f()
  })
}
