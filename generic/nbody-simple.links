############################################################################################
# N-body simulation                                                                        #
# =================                                                                        #
#                                                                                          #
# Based on Mark C. Lewis's (with modifications from Chad Whipkey) "n-body Java #2 program" #
#  <https://benchmarksgame-team.pages.debian.net/benchmarksgame/program/nbody-java-2.html> #
#                                                                                          #
# Uses: TODO fill this                                                                     #
#                                                                                          #
############################################################################################

# Type aliases:
typename Triple(a) = (a, a, a);

typename Vector3 = Triple(Float);
var zero3 = (0.0, 0.0, 0.0) : Vector3;
typename Scalar = Float;

typename Body = ( pos  : Vector3
                , vel  : Vector3
                , mass : Scalar );

typename State = [Body];

# Helper functions:

sig fst : ((a,b)) -> a
fun fst((a,_)) { a }

sig snd : ((a,b)) -> b
fun snd((_,b)) { b }

sig map2 : ((a,b) ~> c, [a], [b]) ~> [c]
fun map2(f, xs, ys) {
  switch ((xs, ys)) {
    case ([], []) -> []
    case (x::xs, y::ys) -> f(x,y) :: map2(f, xs, ys)
    case _ -> error("Incompatible lists, map2 requires they have the same length.")
  }
}

op (ux,uy,uz) +++ (vx,vy,vz) { (ux +. vx, uy +. vy, uz +. vz ) }

# sig (---) : (Vector3, Vector3) -> Vector3
op (ux,uy,uz) --- (vx,vy,vz) { (ux -. vx, uy -. vy, uz -. vz ) }

sig vector_sum : ([Vector3]) ~> Vector3
fun vector_sum(lst) {
  fold_left((+++), zero3, lst)
}

# sig (**.) : (Float, Vector3) -> Vector3
op s **. (x,y,z) { (s *. x, s *. y, s *. z) }

sig norm : (Vector3) -> Float
fun norm((x,y,z)) {
  var n2 = x *. x +. y *. y +. z *. z;
  sqrt(n2)
}

sig interact : (Float, Body, Body) -> (Body, Body)
fun interact(dt, (pos=r1, vel=v1, mass=m1),
                 (pos=r2, vel=v2, mass=m2)) {
  var dr = r1 --- r2;
  var d  = norm(dr);
  var mag = dt /. (d *. d *. d);

  var fc1 = m2 *. mag;
  var fc2 = m1 *. mag;

  var v1 = v1 --- (fc1 **. dr);
  var v2 = v2 +++ (fc2 **. dr);

  var b1 = (pos=r1, vel=v1, mass=m1);
  var b2 = (pos=r2, vel=v2, mass=m2);
  (b1, b2)
}


sig inter_fold : (Float) -> ((Body, [Body]), Body) -> (Body, [Body])
fun inter_fold(dt)((this:Body, acc:[Body]), other:Body) {
  var (this', other') = interact(dt, this, other);
  (this', other' :: acc)
}

sig advance : (Float) -> (State) ~> State
fun advance(dt)(system) {
  switch (system) {
    case [] -> []

    case body :: rest -> {

      var (body, rest) = fold_left(inter_fold(dt), (body, []), rest);

      var pos = body.pos +++ (dt **. body.vel);
      var body = (pos=pos, vel=body.vel, mass=body.mass);

      var rest = advance(dt)(rest);
      body :: rest
    }
  }
}


sig initial_state : () -> State
fun initial_state() {
  var pi = 3.141592653589793;
  var solar_mass = 4.0 *. pi *. pi;
  var days_per_year = 365.24;

  var sun = (mass = solar_mass, pos = zero3, vel = zero3);

  var jupiter = ( mass = 9.54791938424326609e-4 *. solar_mass
                , pos  = ( 4.84143144246472090e0
                         , -.1.16032004402742839e0
                         , -.1.03622044471123109e-1 )
                , vel  = ( 1.66007664274403694e-3 *. days_per_year
                         , 7.69901118419740425e-3 *. days_per_year
                         , -.6.90460016972063023e-5 *. days_per_year ));

  var saturn = ( mass = 2.85885980666130812e-4 *. solar_mass
               , pos  = ( 8.34336671824457987e0
                        , 4.12479856412430479e0
                        , -.4.03523417114321381e-1 )
               , vel  = ( -.2.76742510726862411e-3 *. days_per_year
                        , 4.99852801234917238e-3 *. days_per_year
                        , 2.30417297573763929e-5 *. days_per_year ));

  var uranus = ( mass = 4.36624404335156298e-5 *. solar_mass
               , pos  = ( 1.28943695621391310e1
                        , -.1.51111514016986312e1
                        , -.2.23307578892655734e-1 )
               , vel  = ( 2.96460137564761618e-3 *. days_per_year
                        , 2.37847173959480950e-3 *. days_per_year
                        , -.2.96589568540237556e-5 *. days_per_year ));

  var neptune = ( mass = 5.15138902046611451e-5 *. solar_mass
                , pos  = ( 1.53796971148509165e1
                         , -.2.59193146099879641e1
                         , 1.79258772950371181e-1 )
                , vel  = ( 2.68067772490389322e-3 *. days_per_year
                         , 1.62824170038242295e-3 *. days_per_year
                         , -.9.51592254519715870e-5 *. days_per_year ));

  [ sun, jupiter, saturn, uranus, neptune ]
}
